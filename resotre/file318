<template>
    <v-flex>
        <v-row justify="center" align="center" class="ma-0 pa-0">
            <v-col cols="12" sm="10" md="8" lg="6">
                <v-card color="primary" class="pt-5 pr-5 pl-5">
                    <v-row justify="center"  no-gutters>
                        <v-col cols="12" sm="12" class="mb-5">
                            <v-sheet color="light" min-height="200px">
                                <v-card-text v-html="getFrontRecords"></v-card-text>
                            </v-sheet>
                        </v-col>
                        <v-row justify="center" no-gutters>
                            <v-divider :inset="true"></v-divider>
                        </v-row>
                        <v-col cols="12" sm="12" class="mt-5">
                            <v-sheet color="light" min-height="200px">
                                <v-card-text v-if="!show" v-html="getBackRecords"></v-card-text>
                            </v-sheet>
                        </v-col>
                    </v-row>

                    <answer-panel></answer-panel>
                </v-card>
            </v-col>
        </v-row>
    </v-flex>
</template>

<script>
    import BaseLayout from "../../components/layout/BaseLayout";
    import store from "../../../store/store";
    import {cloneObject, validate} from "../../../plugins/helpers";
    import router from "../../router/routes";
    import {mapGetters} from 'vuex';
    import AnswerPanel from "../../components/daemons/Study/AnswerPanel/AnswerPanel";
    export default {
        name: "Train",
        components: {AnswerPanel, BaseLayout},
        props: {
            id: {
                required: true
            }
        },
        computed: {
            ...mapGetters('CardStore', [
                'cards'
            ]),
            cardsByDeck: function(){
                if(this.deck.cards) {
                   return this.deck.cards.map((id)=>{
                        return this.cards[id];
                    });
                }
                return [];
            },
            card: function() {
                if(this.show) {
                    this.value = this.cardsByDeck.pop();
                }
                return this.value;
            },
            params: function() {
                if(this.card && this.deck) {
                    return {
                        dateNextRepeat: this.card.next_repeat_at,
                        countRepeat: this.card.count_repeat,
                        difficultyIndex: this.deck.difficulty_index,
                        baseIndex: this.deck.base_index,
                        modifierIndex: this.deck.modifier_index,
                    }
                }
                return {}
            },
            getFrontRecords: function () {
                if (this.card && this.card.frontRecords) {
                    return this.card.frontRecords[0].content;
                }
                return '';
            },
            getBackRecords: function () {
                if (this.card && this.card.backRecords) {
                    return this.card.backRecords[0].content;
                }
                return '';
            }
        },
        data: function () {
            return {
                show: false,
                deck: {
                    default: {}
                },
                value: null
            }
        },
        methods: {
            showBackSide: function () {
                this.show = false;
            },
            setDeck(deck) {
                this.deck = deck;
            },
            setNewRound: function() {
                if(this.cardsByDeck.length > 0) {
                    this.show = true;
                } else {
                    this.$router.go(-1);
                }
            }
        },
        beforeRouteEnter: async function (to , from , next) {
            if (validate(to)) {
                await store.dispatch('DeckStore/getOne', {id: to.params.id});
                let deck = store.getters['DeckStore/decks'][to.params.id];
                if (deck) {
                    next((vm) =>  {
                        vm.setDeck(deck);
                        vm.setNewRound();
                    });
                } else {
                    router.push({name: '404'});
                }
            } else {
                router.push({name: '404'});
            }
        }
    }
</script>

<style scoped>
</style>