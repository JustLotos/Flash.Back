# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
#
#    serializer:
#        name_converter: 'serializer.name_converter.camel_case_to_snake_case'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #BUNDLES
    Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler:
        autowire: true
    Gesdinet\JWTRefreshTokenBundle\Service\RefreshToken:
        alias: "gesdinet.jwtrefreshtoken"
    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener

    #EVENT LISTENERS
    App\Event\EventListener\JWTCreatedListener:
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
    App\Event\EventListener\AuthenticationSuccessListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
    app.security.hash.password.listener:
        class: App\Event\EventListener\HashPasswordListener
        tags:
            - { name: doctrine.event_subscriber }
#    App\Event\EventListener\HTTPExceptionListener:
#        tags:
#            - { name: kernel.event_listener, event: kernel.exception }

    #CUSTOM SERVICE
    App\Service\CodeGeneratorService:
        autowire: true
    App\Service\MailerService:
        autowire: true
    App\Service\TwigService:
        autowire: true

    #CUSTOM VALIDATORS
    validator.unique.uniqueuser:
        class: App\Validator\UniqueEntityConstraint\UniqueEntityValidator
        tags:
            - { name: validator.constraint_validator, alias: UniqueEntity }